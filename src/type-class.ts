export * as AbelianGroup from "./type-class/abelian-group.ts";
export * as AbelianMonoid from "./type-class/abelian-monoid.ts";
export * as Applicative from "./type-class/applicative.ts";
export * as Apply from "./type-class/apply.ts";
export * as Arrow from "./type-class/arrow.ts";
export * as Associative from "./type-class/associative.ts";
export * as Bifoldable from "./type-class/bifoldable.ts";
export * as Bifunctor from "./type-class/bifunctor.ts";
export * as Bitraversable from "./type-class/bitraversable.ts";
export * as Category from "./type-class/category.ts";
export * as Choice from "./type-class/choice.ts";
export * as Comonad from "./type-class/comonad.ts";
export * as Conjoined from "./type-class/conjoined.ts";
export * as Distributive from "./type-class/distributive.ts";
export * as Endo from "./type-class/endo.ts";
export * as Eq from "./type-class/eq.ts";
export * as Field from "./type-class/field.ts";
export * as FlatMap from "./type-class/flat-map.ts";
export * as Foldable from "./type-class/foldable.ts";
export * as Functor from "./type-class/functor.ts";
export * as Group from "./type-class/group.ts";
export * as HasInf from "./type-class/has-inf.ts";
export * as HasNegInf from "./type-class/has-neg-inf.ts";
export * as Indexable from "./type-class/indexable.ts";
export * as Indexed from "./type-class/indexed.ts";
export * as Iso from "./type-class/iso.ts";
export * as Magma from "./type-class/magma.ts";
export * as Monad from "./type-class/monad.ts";
export * as MonadRec from "./type-class/monad-rec.ts";
export * as Monoid from "./type-class/monoid.ts";
export * as Monoidal from "./type-class/monoidal.ts";
export * as Nt from "./type-class/nt.ts";
export * as Ord from "./type-class/ord.ts";
export * as PartialEq from "./type-class/partial-eq.ts";
export * as PartialOrd from "./type-class/partial-ord.ts";
export * as Profunctor from "./type-class/profunctor.ts";
export * as Pure from "./type-class/pure.ts";
export * as Reduce from "./type-class/reduce.ts";
export * as Representable from "./type-class/representable.ts";
export * as Reviewable from "./type-class/reviewable.ts";
export * as Ring from "./type-class/ring.ts";
export * as SemiGroup from "./type-class/semi-group.ts";
export * as SemiGroupal from "./type-class/semi-groupal.ts";
export * as SemiGroupoid from "./type-class/semi-groupoid.ts";
export * as SemiRing from "./type-class/semi-ring.ts";
export * as Settable from "./type-class/settable.ts";
export * as Strong from "./type-class/strong.ts";
export * as Symmetric from "./type-class/symmetric.ts";
export * as Tensor from "./type-class/tensor.ts";
export * as Traversable from "./type-class/traversable.ts";
export * as Unital from "./type-class/unital.ts";
export * as Variance from "./type-class/variance.ts";
